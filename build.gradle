buildscript {
	ext {
		springBootVersion = '3.1.5'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:3.1.5")
		classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'football.start'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '17'

	repositories {
		mavenCentral()
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'com.okta.spring:okta-spring-boot-starter:3.0.5'
		compileOnly 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'

		//JPA, 스프링 데이터 JPA 추가
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

		//Querydsl 추가
		implementation 'com.querydsl:querydsl-core'
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.3.1.Final'
		annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		// Auto Processor
//		implementation 'com.google.auto.service:auto-service:1.1.1'
//		implementation 'com.squareup:javapoet:1.13.0'



	}

	tasks.named('test') {
		useJUnitPlatform()
	}

	//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
	clean {
		delete file('src/main/generated')
	}
}

dependencies {
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
//	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.2'

	// AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	implementation(project(":redis"))
	implementation(project(":admin"))
	implementation(project(":common"))
	implementation(project(":payment"))
	implementation(project(":sms"))
	implementation(project(":login"))
	implementation(project(":kakaologin"))
	implementation(project(":manager"))

}

subprojects {
	dependencies {
		annotationProcessor 'org.projectlombok:lombok'
	}
}

project(":redis") {
	dependencies {
		// redis 순위매길때 사용
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	}
}
project(":batch") {
	dependencies {
		implementation(project(":common"))
		implementation(project(":payment"))
		implementation(project(":redis"))

		// spring batch
		implementation 'org.springframework.boot:spring-boot-starter-batch'
		testImplementation 'org.springframework.batch:spring-batch-test'
	}
}
project(":file") {
	dependencies {
		implementation(project(":common"))
	}
}
project(":manager") {
	dependencies {
		implementation(project(":login"))
		implementation(project(":common"))
	}
}
project(":login") {
	dependencies {
		implementation(project(":common"))
		implementation(project(":sms"))
		implementation(project(":file"))
	}
}

project(":payment") {
	dependencies {
		implementation(project(":login"))
		implementation(project(":common"))
	}
}
project(":admin") {
	dependencies {
		implementation(project(":login"))
		implementation(project(":common"))
		implementation(project(":file"))
	}
}

project(":sms") {
	dependencies {
		implementation(project(":common"))
		// 문자 인증
		implementation 'net.nurigo:sdk:4.2.7'
	}
}
project(":kakaopay") {
	dependencies {
		implementation(project(":login"))
		implementation(project(":common"))
		implementation(project(":payment"))
	}
}
project(":kakaologin") {
	dependencies {
		implementation(project(":login"))
		implementation(project(":common"))
		implementation(project(":login"))
	}
}

